(()=>{"use strict";class e{constructor(e,n,t,o,i,l,s){this._id=e,this.grade=n,this.color=t,this.section=o,this.type=i,this.canLead=l,this.canTopRope=s}}console.log("loaded."),window.onload=function(){o()};const n=new class{constructor(){}async addRoute(n){n=new e("3","5.4","Yellow",1,"rope",!0,!0);let t=JSON.stringify(n);return fetch("/addRoute",{method:"POST",headers:{"Content-Type":"application/json"},body:t}).then((e=>e.json()))}removeRoute(e){let n=JSON.stringify(e.getIdJSON());fetch("/removeRoute",{method:"POST",headers:{"Content-Type":"application/json"},body:n}).then((e=>e.json()))}async getAllRoutes(){return fetch("/routes",{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json()))}},t=new class{constructor(){}parseClimbType(e){if(e.type.includes("rope")){if(e.canLead){if(e.canTopRope)return"Lead/Top Rope";if(!e.canTopRope)return"Lead Only"}else if(e.canTopRope&&!e.canLead)return"Top Rope Only"}else if(e.type.includes("boulder"))return"Boulder"}},o=function(){n.getAllRoutes().then((e=>i(e)))},i=function(e){console.log("Initializing table with "+JSON.stringify(e));const n=document.getElementById("dataTable");for(let e=n.rows.length-1;e>0;e--)n.deleteRow(e);e.forEach((function(e){const o=n.insertRow(-1),i=o.insertCell(0),l=o.insertCell(1),s=o.insertCell(2),r=o.insertCell(3),c=o.insertCell(4),a=o.insertCell(5),d=document.createElement("input");d.type="button",d.id="deleteButton",d.value="Delete",d.onclick=function(){},a.appendChild(d),i.innerHTML=e._id,l.innerHTML=e.grade,s.innerHTML=e.color,s.style.background=e.color,r.innerHTML=e.section,c.innerHTML=t.parseClimbType(e),console.log(e)}))}})();
//# sourceMappingURL=bundle.32cb66ecb8438f0b.js.map