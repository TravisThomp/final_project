{"version":3,"file":"bundle.55556bf5da14bfc4.js","mappings":"mBAAe,MAAMA,EACjBC,YAAYC,EAAKC,EAAOC,EAAOC,EAASC,EAAMC,EAASC,GACnDC,KAAKP,IAAMA,EACXO,KAAKN,MAAQA,EACbM,KAAKL,MAAQA,EACbK,KAAKJ,QAAUA,EACfI,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,EACfE,KAAKD,WAAaA,GCRX,MAAME,EAEjBT,eASAU,SAASC,GAEL,IAAIC,EAAOD,EAAME,SAEjBC,MAAO,YAAa,CAChBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBJ,KAAMA,IAEPK,MAAMC,GAAYA,EAASC,SASlCC,YAAYT,GAER,IAAIC,EAAOD,EAAMU,YAEjBP,MAAO,eAAgB,CACnBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBJ,KAAMA,IAEPK,MAAMC,GAAYA,EAASC,SAShB,qBAEd,OAAOL,MAAQ,UAAU,CACrBC,OAAO,MACPC,QAAS,CACP,eAAgB,sBAEnBC,MAAMC,GAAYA,EAASC,SAC3BF,MAAKE,SCxDhB,IAAIG,EAAW,KCAXC,EAAM,IDEK,MAEXvB,cAEI,GAAGsB,EAEC,OAAOA,EAGXA,EAAWd,KAEXA,KAAKgB,YAAc,IAAIf,EACvBD,KAAKiB,MAAQ,IAAI1B,ICbzB2B,OAAOH,IAAMA,EAIb,MAIMI,EAAc,CAJL,IAAI5B,MAAM,IAAK,KAAM,QAAS,GAC9B,IAAIA,MAAM,IAAK,MAAO,SAAU,EAAG,QAAQ,GAAM,GACjD,IAAIA,MAAM,IAAK,MAAO,QAAS,IAKxC6B,EAASC,SAASC,eAAe,UACjCC,EAAYF,SAASC,eAAe,aAE1CH,EAAYK,SAAQP,GAEpB,SAAmBA,GACf,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,EAAUG,SAAUD,EAChCF,EAAUI,QAAQF,GAAGG,QAAUX,EAAMpB,OACrC0B,EAAUI,QAAQJ,EAAUI,QAAQD,QAAU,IAAIG,OAAOZ,EAAMpB,OAAOA,OAG9E,IAAK,IAAI4B,EAAI,EAAGA,EAAIL,EAAOM,SAAUD,EAC7BL,EAAOO,QAAQF,GAAGG,QAAUR,EAAOvB,OACnCuB,EAAOO,QAAQP,EAAOO,QAAQD,QAAU,IAAIG,OAAOZ,EAAMvB,QAVxCoC,CAAUb,M","sources":["webpack:///./src/app/route/Climb.js","webpack:///./src/app/util/MongoManager.js","webpack:///./src/app/App.js","webpack:///./src/script.js"],"sourcesContent":["export default class Climb {\r\n    constructor(_id, grade, color, section, type, canLead, canTopRope) {\r\n        this._id = _id;\r\n        this.grade = grade;\r\n        this.color = color;\r\n        this.section = section;\r\n        this.type = type;\r\n        this.canLead = canLead;\r\n        this.canTopRope = canTopRope;\r\n    }\r\n}","export default class MongoManager\r\n{\r\n    constructor()\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Adds a route to the database\r\n     * @param {route to add} route \r\n     */\r\n    addRoute(route)\r\n    {\r\n        let body = route.toJSON();\r\n\r\n        fetch( '/addRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route ID\r\n    }\r\n\r\n    /**\r\n     * removes a route from the database\r\n     * @param {route to remove} route \r\n     */\r\n    removeRoute(route)\r\n    {\r\n        let body = route.getIdJSON();\r\n\r\n        fetch( '/removeRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route list\r\n    }\r\n\r\n    /**\r\n     * Gets all the routes in database\r\n     * @return An array of all the routes\r\n     */\r\n    async getAllRoutes()\r\n    {\r\n        return fetch( `/routes`, {\r\n            method:'GET',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          }})\r\n          .then( response => response.json())\r\n          .then(json => {\r\n            //TO-DO Store Routes in Table\r\n          })\r\n    }\r\n\r\n}","import Climb from \"./route/Climb\"\r\nimport MongoManager from \"./util/MongoManager\"\r\n\r\nlet instance = null\r\n\r\nexport default class App\r\n{\r\n    constructor()\r\n    {\r\n        if(instance)\r\n        {\r\n            return instance\r\n        }\r\n\r\n        instance = this\r\n\r\n        this.mongoManger = new MongoManager()\r\n        this.climb = new Climb();\r\n    }\r\n}","import App from './app/App'\r\n//import Climb from \"./app/route/Climb.js\";\r\n\r\nlet app = new App()\r\nwindow.app = app\r\n\r\n//TODO: get the list of climbs from the database, and iterate over to populate the filter list\r\n\r\nconst climb1 = new Climb(\"1\", \"VB\", \"Brown\", 1);\r\nconst climb2 = new Climb(\"2\", \"5.4\", \"Yellow\", 1, \"rope\", true, true);\r\nconst climb3 = new Climb(\"3\", \"V12\", \"Green\", 1);\r\n\r\nconst climbsArray = [climb1, climb2, climb3];\r\n\r\n//Get the grades and types select\r\nconst grades = document.getElementById('grades');\r\nconst climbType = document.getElementById('climbType');\r\n//Iterate over each element in grades to add each grade as an option in the select\r\nclimbsArray.forEach(climb => addOption(climb))\r\n//Add the option to the select\r\nfunction addOption(climb) {\r\n    for (let i = 0; i < climbType.length; ++i){\r\n        if (climbType.options[i].value !== climb.type){\r\n            climbType.options[climbType.options.length] = new Option(climb.type().type)\r\n        }\r\n    }\r\n    for (let i = 0; i < grades.length; ++i){\r\n        if (grades.options[i].value !== grades.type){\r\n            grades.options[grades.options.length] = new Option(climb.grade)\r\n        }\r\n    }\r\n}"],"names":["Climb","constructor","_id","grade","color","section","type","canLead","canTopRope","this","MongoManager","addRoute","route","body","toJSON","fetch","method","headers","then","response","json","removeRoute","getIdJSON","instance","app","mongoManger","climb","window","climbsArray","grades","document","getElementById","climbType","forEach","i","length","options","value","Option","addOption"],"sourceRoot":""}