{"version":3,"file":"bundle.32cb66ecb8438f0b.js","mappings":"mBAAe,MAAMA,EACjBC,YAAYC,EAAKC,EAAOC,EAAOC,EAASC,EAAMC,EAASC,GACnDC,KAAKP,IAAMA,EACXO,KAAKN,MAAQA,EACbM,KAAKL,MAAQA,EACbK,KAAKJ,QAAUA,EACfI,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,EACfE,KAAKD,WAAaA,CACrB,ECNLE,QAAQC,IAAI,WAEZC,OAAOC,OAAS,WACZC,GACH,EAED,MAAMC,EAAe,ICPN,MAEXd,cAGC,CAMa,eAACe,GAEXA,EAAQ,IAAIhB,EAAM,IAAK,MAAO,SAAU,EAAG,QAAQ,GAAM,GAI1D,IAAIiB,EAAOC,KAAKC,UAAUH,GAEzB,OAAOI,MAAO,YAAa,CACvBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBL,KAAMA,IAEPM,MAAMC,GAAYA,EAASC,QAGjC,CAMDC,YAAYV,GAER,IAAIC,EAAOC,KAAKC,UAAUH,EAAMW,aAEhCP,MAAO,eAAgB,CACnBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBL,KAAMA,IAEPM,MAAMC,GAAYA,EAASC,QAGjC,CAMiB,qBAEd,OAAOL,MAAQ,UAAU,CACrBC,OAAO,MACPC,QAAS,CACP,eAAgB,sBAEnBC,MAAMC,GAAYA,EAASC,QACjC,GDvDCG,EAAiB,IEVR,MAEX3B,cAAgB,CAChB4B,eAAeC,GACX,GAAIA,EAAMxB,KAAKyB,SAAS,SACpB,GAAID,EAAMvB,QAAS,CACf,GAAIuB,EAAMtB,WACN,MAAO,gBACJ,IAAKsB,EAAMtB,WACd,MAAO,WAEd,MAAM,GAAIsB,EAAMtB,aAAesB,EAAMvB,QAClC,MAAO,qBAER,GAAIuB,EAAMxB,KAAKyB,SAAS,WAC3B,MAAO,SAEd,GFLCjB,EAAe,WACjBC,EAAaiB,eACRT,MAAKC,GAAYS,EAAUT,IACnC,EAEKS,EAAY,SAAUR,GACxBf,QAAQC,IAAI,2BAA6BO,KAAKC,UAAUM,IAGxD,MAAMS,EAAQC,SAASC,eAAe,aAGtC,IAAK,IAAIC,EADQH,EAAMI,KAAKC,OACJ,EAAGF,EAAI,EAAGA,IAC9BH,EAAMM,UAAUH,GAGpBZ,EAAKgB,SAAQ,SAASC,GAElB,MAAMC,EAAMT,EAAMU,WAAW,GAGvBC,EAAYF,EAAIG,WAAW,GAC3BC,EAAeJ,EAAIG,WAAW,GAC9BE,EAAeL,EAAIG,WAAW,GAC9BG,EAAiBN,EAAIG,WAAW,GAChCI,EAAcP,EAAIG,WAAW,GAC7BK,EAAgBR,EAAIG,WAAW,GAE/BM,EAAejB,SAASkB,cAAc,SAC5CD,EAAa9C,KAAO,SACpB8C,EAAaE,GAAK,eAClBF,EAAaG,MAAQ,SACrBH,EAAaI,QAAU,WAAiC,EACxDL,EAAcM,YAAYL,GAI1BP,EAAUa,UAAYhB,EAAExC,IACxB6C,EAAaW,UAAYhB,EAAEvC,MAC3B6C,EAAaU,UAAYhB,EAAEtC,MAC3B4C,EAAaW,MAAMC,WAAalB,EAAEtC,MAClC6C,EAAeS,UAAYhB,EAAErC,QAC7B6C,EAAYQ,UAAY9B,EAAeC,eAAea,GACtDhC,QAAQC,IAAI+B,EACf,GAEJ,C","sources":["webpack:///./src/main/app/route/Climb.js","webpack:///./src/admin/admin.js","webpack:///./src/util/MongoManager.js","webpack:///./src/util/ClimbTypeParser.js"],"sourcesContent":["export default class Climb {\r\n    constructor(_id, grade, color, section, type, canLead, canTopRope) {\r\n        this._id = _id;\r\n        this.grade = grade;\r\n        this.color = color;\r\n        this.section = section;\r\n        this.type = type;\r\n        this.canLead = canLead;\r\n        this.canTopRope = canTopRope;\r\n    }\r\n}","import MongoManager from \"../util/MongoManager\";\r\nimport ClimbTypeUtils from \"../util/ClimbTypeParser\";\r\n\r\nconsole.log(\"loaded.\")\r\n\r\nwindow.onload = function() {\r\n    getTableData()\r\n}\r\n\r\nconst mongoManager = new MongoManager();\r\nconst climbTypeUtils = new ClimbTypeUtils();\r\n\r\nconst getTableData = function() {\r\n    mongoManager.getAllRoutes()\r\n        .then(response => initTable(response))\r\n}\r\n\r\nconst initTable = function (json) {\r\n    console.log(\"Initializing table with \" + JSON.stringify(json))\r\n\r\n    // Find a <table> element with id=\"myTable\":\r\n    const table = document.getElementById(\"dataTable\");\r\n\r\n    const rowCount = table.rows.length;\r\n    for (let i = rowCount - 1; i > 0; i--) {\r\n        table.deleteRow(i);\r\n    }\r\n\r\n    json.forEach(function(x) {\r\n        // Create an empty <tr> element and add it to the 1st position of the table:\r\n        const row = table.insertRow(-1);\r\n\r\n// Insert new cells (<td> elements) at the 1st and 2nd position of the \"new\" <tr> element:\r\n        const newIdCell = row.insertCell(0);\r\n        const newGradeCell = row.insertCell(1);\r\n        const newColorCell = row.insertCell(2);\r\n        const newSectionCell = row.insertCell(3);\r\n        const newTypeCell = row.insertCell(4);\r\n        const newDeleteCell = row.insertCell(5);\r\n\r\n        const deleteButton = document.createElement('input');\r\n        deleteButton.type = \"button\";\r\n        deleteButton.id = \"deleteButton\";\r\n        deleteButton.value = \"Delete\";\r\n        deleteButton.onclick = function() {handleDeleteClick(x)};\r\n        newDeleteCell.appendChild(deleteButton);\r\n\r\n\r\n// Add some text to the new cells:\r\n        newIdCell.innerHTML = x._id;\r\n        newGradeCell.innerHTML = x.grade;\r\n        newColorCell.innerHTML = x.color;\r\n        newColorCell.style.background = x.color;\r\n        newSectionCell.innerHTML = x.section;\r\n        newTypeCell.innerHTML = climbTypeUtils.parseClimbType(x);\r\n        console.log(x)\r\n    })\r\n\r\n}\r\n\r\nfunction handleDeleteClick(climbID) {\r\n\r\n}","import Climb from \"../main/app/route/Climb\";\r\n\r\nexport default class MongoManager\r\n{\r\n    constructor()\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Adds a route to the database\r\n     * @param {route to add} route \r\n     */\r\n    async addRoute(route)\r\n    {\r\n        route = new Climb(\"3\", \"5.4\", \"Yellow\", 1, \"rope\", true, true);\r\n\r\n        //let body = route.toJSON();\r\n       // console.log(body)\r\n       let body = JSON.stringify(route);\r\n        \r\n        return fetch( '/addRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route ID\r\n    }\r\n\r\n    /**\r\n     * removes a route from the database\r\n     * @param {route to remove} route \r\n     */\r\n    removeRoute(route)\r\n    {\r\n        let body = JSON.stringify(route.getIdJSON());\r\n\r\n        fetch( '/removeRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route list\r\n    }\r\n\r\n    /**\r\n     * Gets all the routes in database\r\n     * @return An array of all the routes\r\n     */\r\n    async getAllRoutes()\r\n    {\r\n        return fetch( `/routes`, {\r\n            method:'GET',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          }})\r\n          .then( response => response.json())\r\n    }\r\n\r\n}","export default class ClimbTypeUtils {\r\n\r\n    constructor() {}\r\n    parseClimbType(climb) {\r\n        if (climb.type.includes(\"rope\")) {\r\n            if (climb.canLead) {\r\n                if (climb.canTopRope) {\r\n                    return \"Lead/Top Rope\"\r\n                } else if (!climb.canTopRope) {\r\n                    return \"Lead Only\"\r\n                }\r\n            } else if (climb.canTopRope && !climb.canLead) {\r\n                return \"Top Rope Only\"\r\n            }\r\n        } else if (climb.type.includes(\"boulder\")) {\r\n            return \"Boulder\"\r\n        }\r\n    }\r\n}"],"names":["Climb","constructor","_id","grade","color","section","type","canLead","canTopRope","this","console","log","window","onload","getTableData","mongoManager","route","body","JSON","stringify","fetch","method","headers","then","response","json","removeRoute","getIdJSON","climbTypeUtils","parseClimbType","climb","includes","getAllRoutes","initTable","table","document","getElementById","i","rows","length","deleteRow","forEach","x","row","insertRow","newIdCell","insertCell","newGradeCell","newColorCell","newSectionCell","newTypeCell","newDeleteCell","deleteButton","createElement","id","value","onclick","appendChild","innerHTML","style","background"],"sourceRoot":""}