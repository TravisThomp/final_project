{"version":3,"file":"bundle.7b3edd611be98690.js","mappings":"mBAAe,MAAMA,EACjBC,YAAYC,EAAKC,EAAOC,EAAOC,EAASC,EAAMC,EAASC,GACnDC,KAAKP,IAAMA,EACXO,KAAKN,MAAQA,EACbM,KAAKL,MAAQA,EACbK,KAAKJ,QAAUA,EACfI,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,EACfE,KAAKD,WAAaA,CACrB,ECPU,MAAME,EAEjBT,cAGC,CAMa,eAACU,GAEXA,EAAQ,IAAIX,EAAM,IAAK,MAAO,SAAU,EAAG,QAAQ,GAAM,GAI1D,IAAIY,EAAOC,KAAKC,UAAUH,GAGzB,OAFAI,QAAQC,IAAIJ,GAELK,MAAO,YAAa,CACvBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBP,KAAMA,IAEPQ,MAAMC,GAAYA,EAASC,QAGjC,CAMDC,YAAYZ,GAER,IAAIC,EAAOC,KAAKC,UAAUH,EAAMa,aAEhCP,MAAO,eAAgB,CACnBC,OAAO,OACPC,QAAS,CACL,eAAgB,oBAEpBP,KAAMA,IAEPQ,MAAMC,GAAYA,EAASC,QAGjC,CAMiB,qBAEd,OAAOL,MAAQ,UAAU,CACrBC,OAAO,MACPC,QAAS,CACP,eAAgB,sBAEnBC,MAAMC,GAAYA,EAASC,QACjC,EC/DL,IAAIG,EAAW,KCAXC,EAAM,IDEK,MAEXzB,cAEI,GAAGwB,EAEC,OAAOA,EAGXA,EAAWhB,KAEXA,KAAKkB,YAAc,IAAIjB,EACvBD,KAAKmB,MAAQ,IAAI5B,CACpB,GCdL6B,OAAOH,IAAMA,EAIb,MAKMI,EAAc,CALL,IAAI9B,EAAM,IAAK,KAAM,QAAS,EAAG,WACjC,IAAIA,EAAM,IAAK,KAAM,QAAS,EAAG,WACjC,IAAIA,EAAM,IAAK,MAAO,SAAU,EAAG,QAAQ,GAAM,GACjD,IAAIA,EAAM,IAAK,MAAO,QAAS,EAAG,YAK3C+B,EAAeC,SAASC,eAAe,UACrBD,SAASC,eAAe,aAEhDJ,OAAOK,iBAAiB,QAAQ,KAC5BnB,QAAQC,IAAI,KAKZc,EAAYK,SAAQP,GAIxB,SAAmBA,IAsBnB,SAAwBQ,EAAQC,GAE5B,IAAIC,GAAe,EACfC,EAAgBF,EAASG,OAE7B,KAAQD,KAEJ,GAAKF,EAASI,QAASF,GAAgBG,QAAUN,EACjD,CACIE,GAAe,EACf,KACH,CAEL,OAAOA,CACV,EAnCQA,CAAaV,EAAMzB,MAAO4B,KAC3BA,EAAaU,QAAQV,EAAaU,QAAQD,QAAU,IAAIG,OAAOf,EAAMzB,MAAOyB,EAAMzB,OAEzF,CARgCyC,CAAUhB,KA0C3C,SAAoBiB,GAChB,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAE,EAAEA,EAAEF,EAAQJ,QAAQD,OAAOO,IAClCD,EAAOC,GAAK,GACZD,EAAOC,GAAG,GAAKF,EAAQJ,QAAQM,GAAGC,KAClCF,EAAOC,GAAG,GAAKF,EAAQJ,QAAQM,GAAGL,MAGtC,IADAI,EAAOG,OACAJ,EAAQJ,QAAQD,OAAS,GAC5BK,EAAQJ,QAAQ,GAAK,KAEzB,IAAK,IAAIM,EAAE,EAAEA,EAAED,EAAON,OAAOO,IACzBF,EAAQJ,QAAQM,GAAK,IAAIJ,OAAOG,EAAOC,GAAG,GAAID,EAAOC,GAAG,GAE/D,CA3DGG,CAAWnB,EAAX,G","sources":["webpack:///./src/app/route/Climb.js","webpack:///./src/app/util/MongoManager.js","webpack:///./src/app/App.js","webpack:///./src/script.js"],"sourcesContent":["export default class Climb {\r\n    constructor(_id, grade, color, section, type, canLead, canTopRope) {\r\n        this._id = _id;\r\n        this.grade = grade;\r\n        this.color = color;\r\n        this.section = section;\r\n        this.type = type;\r\n        this.canLead = canLead;\r\n        this.canTopRope = canTopRope;\r\n    }\r\n}","import Climb from \"../route/Climb\";\r\n\r\nexport default class MongoManager\r\n{\r\n    constructor()\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Adds a route to the database\r\n     * @param {route to add} route \r\n     */\r\n    async addRoute(route)\r\n    {\r\n        route = new Climb(\"3\", \"5.4\", \"Yellow\", 1, \"rope\", true, true);\r\n\r\n        //let body = route.toJSON();\r\n       // console.log(body)\r\n       let body = JSON.stringify(route);\r\n        console.log(body)\r\n        \r\n        return fetch( '/addRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route ID\r\n    }\r\n\r\n    /**\r\n     * removes a route from the database\r\n     * @param {route to remove} route \r\n     */\r\n    removeRoute(route)\r\n    {\r\n        let body = JSON.stringify(route.getIdJSON());\r\n\r\n        fetch( '/removeRoute', {\r\n            method:'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },  \r\n            body: body \r\n          })\r\n          .then( response => response.json())\r\n\r\n          //TO-DO: Update route list\r\n    }\r\n\r\n    /**\r\n     * Gets all the routes in database\r\n     * @return An array of all the routes\r\n     */\r\n    async getAllRoutes()\r\n    {\r\n        return fetch( `/routes`, {\r\n            method:'GET',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          }})\r\n          .then( response => response.json())\r\n    }\r\n\r\n}","import Climb from \"./route/Climb\"\r\nimport MongoManager from \"./util/MongoManager\"\r\n\r\nlet instance = null\r\n\r\nexport default class App\r\n{\r\n    constructor()\r\n    {\r\n        if(instance)\r\n        {\r\n            return instance\r\n        }\r\n\r\n        instance = this\r\n\r\n        this.mongoManger = new MongoManager()\r\n        this.climb = new Climb();\r\n    }\r\n}","import App from './app/App'\r\nimport Climb from \"./app/route/Climb\";\r\n\r\nlet app = new App()\r\nwindow.app = app\r\n\r\n//TODO: get the list of climbs from the database, and iterate over to populate the filter list\r\n\r\nconst climb1 = new Climb(\"1\", \"VB\", \"Brown\", 1, \"boulder\");\r\nconst climb2 = new Climb(\"2\", \"V1\", \"Brown\", 1, \"boulder\");\r\nconst climb3 = new Climb(\"3\", \"5.4\", \"Yellow\", 1, \"rope\", true, true);\r\nconst climb4 = new Climb(\"4\", \"V12\", \"Green\", 1, \"boulder\");\r\n\r\nconst climbsArray = [climb1, climb2, climb3, climb4];\r\n\r\n//Get the grades and types select\r\nconst gradesFilter = document.getElementById('grades');\r\nconst climbTypeFilter = document.getElementById('climbType');\r\n//Iterate over each element in grades to add each grade as an option in the select\r\nwindow.addEventListener('load', () => {\r\n    console.log(123)\r\n    populateFilters()\r\n    sortSelect(gradesFilter)\r\n})\r\nfunction populateFilters() {\r\n    climbsArray.forEach(climb => addOption(climb))\r\n}\r\n\r\n//Add the option to the select\r\nfunction addOption(climb) {\r\n    if (!optionExists(climb.grade, gradesFilter)){\r\n        gradesFilter.options[gradesFilter.options.length] = new Option(climb.grade, climb.grade)\r\n    }\r\n}\r\n\r\nfunction parseClimbType(climb) {\r\n    if (climb.type.includes(\"rope\")) {\r\n        if (climb.canLead) {\r\n            if (climb.canTopRope) {\r\n                return \"Lead or Top Rope\"\r\n            } else if (!climb.canTopRope) {\r\n                return \"Lead Only\"\r\n            }\r\n        } else if (climb.canTopRope && !climb.canLead) {\r\n            return \"Top Rope Only\"\r\n        }\r\n    } else if (climb.type.includes(\"boulder\")) {\r\n        return \"Boulder\"\r\n    }\r\n}\r\n\r\nfunction optionExists ( needle, haystack )\r\n{\r\n    let optionExists = false,\r\n        optionsLength = haystack.length;\r\n\r\n    while ( optionsLength-- )\r\n    {\r\n        if ( haystack.options[ optionsLength ].value === needle )\r\n        {\r\n            optionExists = true;\r\n            break;\r\n        }\r\n    }\r\n    return optionExists;\r\n}\r\n\r\nfunction sortSelect(selElem) {\r\n    let tmpAry = [];\r\n    for (let i=0;i<selElem.options.length;i++) {\r\n        tmpAry[i] = [];\r\n        tmpAry[i][0] = selElem.options[i].text;\r\n        tmpAry[i][1] = selElem.options[i].value;\r\n    }\r\n    tmpAry.sort();\r\n    while (selElem.options.length > 0) {\r\n        selElem.options[0] = null;\r\n    }\r\n    for (let i=0;i<tmpAry.length;i++) {\r\n        selElem.options[i] = new Option(tmpAry[i][0], tmpAry[i][1]);\r\n    }\r\n}\r\n"],"names":["Climb","constructor","_id","grade","color","section","type","canLead","canTopRope","this","MongoManager","route","body","JSON","stringify","console","log","fetch","method","headers","then","response","json","removeRoute","getIdJSON","instance","app","mongoManger","climb","window","climbsArray","gradesFilter","document","getElementById","addEventListener","forEach","needle","haystack","optionExists","optionsLength","length","options","value","Option","addOption","selElem","tmpAry","i","text","sort","sortSelect"],"sourceRoot":""}